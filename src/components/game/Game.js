import React from 'react';
import './Game.css';

import Board from '../board/Board.js';
import calculateWinner from '../helpers/calculate-winner.js';

class Game extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            history: [
                {
                    squares: Array(9).fill(null),
                    currentPlayer: 'üó∑',
                    winner: null,
                },
            ],

            showingHistoryIndex: 0,
        };
    }

    playAt(i) {
        // L·∫•y ra d·ªØ li·ªáu hi·ªán t·∫°i
        const showHistoryIndex = this.state.showingHistoryIndex;
        const showHistory = this.state.history[showHistoryIndex];

        // Sao ch√©p m·∫£ng d·ªØ li·ªáu
        const squares = showHistory.squares.slice();

        // N·∫øu ƒë√£ k·∫øt th√∫c v√°n ho·∫∑c ƒë√£ ch·ªçn √¥ th√¨ b·ªè qua
        if (showHistory.winner || squares[i]) return;

        // G√°n d·ªØ li·ªáu m·ªõi v√†o √¥
        let currentPlayer = showHistory.currentPlayer;
        squares[i] = currentPlayer;
        currentPlayer = currentPlayer == 'üó∑' ? 'üóπ' : 'üó∑';

        // Ki·ªÉm tra xem ƒë√£ th·∫Øng hay ch∆∞a
        const winner = calculateWinner(squares);

        // C·∫≠p nh·∫≠t l·∫°i state
        this.setState({
            // S·ª≠ d·ª•ng slide ƒë·ªÉ b·ªè t·∫•t c·∫£ c√°c state sau ƒë√≥ (n·∫øu c√≥)
            history: this.state.history.slice(0, showHistoryIndex + 1).concat([
                {
                    squares: squares,
                    currentPlayer: currentPlayer,
                    winner: winner,
                },
            ]),
            showingHistoryIndex: showHistoryIndex + 1,
        });
    }

    handleClick(i) {
        this.playAt(i);
    }

    render() {
        // L·∫•y d·ªØ li·ªáu t·∫°i v·ªã tr√≠ hi·ªán t·∫°i
        const showHistoryIndex = this.state.showingHistoryIndex;
        const showHistory = this.state.history[showHistoryIndex];

        // T√≠nh to√°n d·ªØ li·ªáu s·∫Ω log ra
        const moves = this.state.history.map((step, stepIndex) => {
            const description =
                stepIndex == 0 ? 'B·∫Øt ƒë·∫ßu ' : `L∆∞·ª£t ƒëi s·ªë #${stepIndex}, ƒë·∫øn l∆∞·ª£t c·ªßa ${step.currentPlayer}`;

            return (
                <li
                    className={`list-group-item history-select ${
                        this.state.showingHistoryIndex == stepIndex ? 'active' : ''
                    }`}
                    key={stepIndex}
                    onClick={() => this.setState({ showingHistoryIndex: stepIndex })}
                >
                    {description}
                </li>
            );
        });

        // T√≠nh to√°n tr·∫°ng th√°i (th·∫Øng / thua)
        let status;

        if (showHistory.winner) {
            status = 'Ng∆∞·ªùi chi·∫øn th·∫Øng: ' + showHistory.winner;
        } else {
            status = `Ng∆∞·ªùi ch∆°i hi·ªán t·∫°i: ${showHistory.currentPlayer}`;
        }

        // Render ra k·∫øt qu·∫£
        return (
            <div className="container game">
                <div className="row m-3">
                    <div className="col-12">
                        <div className="display-4">Tic Tac Toe</div>
                    </div>
                </div>

                <br />

                <div className="row">
                    <div className="col-sm-12 col-md-6 d-flex justify-content-center align-items-center">
                        <Board
                            squares={showHistory.squares}
                            currentPlayer={showHistory.currentPlayer}
                            winner={showHistory.winner}
                            onClick={(i) => this.handleClick(i)}
                        />
                    </div>

                    <div className="col-sm-12 col-md-6">
                        <div className="lead d-flex justify-content-between align-items-center">
                            <div>{status}</div>
                            <i class="small">2 ng∆∞·ªùi ch∆°i</i>
                        </div>
                        <ol className="list-group">{moves}</ol>
                    </div>
                </div>

                <br />

                {this.state.history.length > 1 ? (
                    <div className="row justify-content-end">
                        <div className="">
                            <button
                                className="btn btn-outline-secondary"
                                onClick={() => {
                                    this.setState({
                                        history: this.state.history.slice(0, 1),
                                        showingHistoryIndex: 0,
                                    });
                                }}
                            >
                                X√≥a h·∫øt
                            </button>
                        </div>
                    </div>
                ) : (
                    ''
                )}
            </div>
        );
    }
}

export default Game;
